use std::str::FromStr;
use crate::{
    ast::{RawExpr, RawIdent, BinaryOp},
    types::Type,
    values::Val,
};

grammar();

pub Uplp = Expr;

Expr: Box<RawExpr> = {
    InfixExpr,
    "let" <Ident> "=" <Expr> "in" <Expr> => Box::new(RawExpr::Let(<>)),
    "|" <Ident> ":" <Type> "|" <Expr> => Box::new(RawExpr::Lambda(<>)),
    "if" <Expr> "then" <Expr> "else" <Expr> => Box::new(RawExpr::IfThenElse(<>)),
}

InfixExpr: Box<RawExpr> = {
    #[precedence(level="0")]
    Applicative,

    #[precedence(level="1")]
    #[assoc(side="left")]
    InfixBOpApp<InfixBOp1, InfixExpr, InfixExpr>,

    #[precedence(level="2")]
    #[assoc(side="left")]
    InfixBOpApp<InfixBOp2, InfixExpr, InfixExpr>,

    #[precedence(level="3")]
    #[assoc(side="left")]
    InfixBOpApp<InfixBOp3, InfixExpr, InfixExpr>,

    #[precedence(level = "4")]
    #[assoc(side="left")]
    InfixBOpApp<InfixBOp4, InfixExpr, InfixExpr>
}

Applicative: Box<RawExpr> = {
    Applicative Terminal => Box::new(RawExpr::App(<>)),
    Terminal,
}

InfixBOpApp<BOp, L, R>: Box<RawExpr> =
    <L> <BOp> <R> => Box::new(RawExpr::Op(<>));

InfixBOp1: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
};

InfixBOp2: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
};

InfixBOp3: BinaryOp = {
    "==" => BinaryOp::Eq,
}

InfixBOp4: BinaryOp = {
    "&&" => BinaryOp::And,
}

Terminal: Box<RawExpr> = {
    Bool => Box::new(RawExpr::Literal(Val::Bool(<>))),
    Num => Box::new(RawExpr::Literal(Val::Num(<>))),
    "()" => Box::new(RawExpr::Literal(Val::Unit)),
    <Ident> => Box::new(RawExpr::Var(<>)),
    "(" <Expr> ")"
};

Type: Type = {
    "Bool" => Type::Bool,
    "Num" => Type::Num,
    "Unit" => Type::Unit,
};

Ident: RawIdent = {
    r"_?[a-zA-Z][a-zA-Z0-9_-]*" => <>.into()
}

Bool: bool = {
    "true" => true,
    "false" => false,
}

Num: f64 = {
    r"-?[0-9]+(?:\.[0-9]+)?" => f64::from_str(<>).unwrap(),
}

match {
    // skip whitespace by default
    r"\s*" => { },
    // skip single-line comments beginning with "--"
    r"--[^\n\r]*[\n\r]*" => { },
    _
}