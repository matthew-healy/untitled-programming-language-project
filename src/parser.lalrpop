use std::str::FromStr;
use crate::ast::{Expr, Ident, Opcode};

grammar;

pub Expr: Box<Expr> = {
    "let" <Ident> "=" <Expr> "in" <Expr> => Box::new(Expr::Let(<>)),
    BinaryOpExpr,
}

Tier<Op, NextTier>: Box<Expr> = {
    Tier<Op, NextTier> Op NextTier => Box::new(Expr::Op(<>)),
    NextTier,
};

BinaryOpExpr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Term>;

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    "()" => Box::new(Expr::Unit),
    <Ident> => Box::new(Expr::Var(<>)),
    "(" <Expr> ")"
};

Ident: Ident = {
    r"_?[a-zA-Z][a-zA-Z0-9_-]*" => <>.into()
}

Num: i32 = {
    r"-?[0-9]+" => i32::from_str(<>).unwrap()
}