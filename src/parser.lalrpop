use std::str::FromStr;
use crate::{
    ast::{RawExpr, RawIdent, BinaryOp},
    values::Val,
};

grammar();

pub Expr: Box<RawExpr> = {
    "let" <Ident> "=" <Expr> "in" <Expr> => Box::new(RawExpr::Let(<>)),
    BinaryOpExpr,
}

Tier<Op, NextTier>: Box<RawExpr> = {
    Tier<Op, NextTier> Op NextTier => Box::new(RawExpr::Op(<>)),
    NextTier,
};

BinaryOpExpr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Term>;

ExprOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
};

FactorOp: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
};

Term: Box<RawExpr> = {
    Num => Box::new(RawExpr::Literal(Val::Num(<>))),
    "()" => Box::new(RawExpr::Literal(Val::Unit)),
    <Ident> => Box::new(RawExpr::Var(<>)),
    "(" <Expr> ")"
};

Ident: RawIdent = {
    r"_?[a-zA-Z][a-zA-Z0-9_-]*" => <>.into()
}

Num: f64 = {
    r"-?[0-9]+(.[0-9]+)?" => f64::from_str(<>).unwrap()
}